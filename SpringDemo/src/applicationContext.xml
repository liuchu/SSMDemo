<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
   http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/aop
   http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
   http://www.springframework.org/schema/tx
   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
   http://www.springframework.org/schema/context
   http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <!-- 开启Spring注解 包括：
        @Required:
        @Autowired:
        @PostConstruct:
        @PreDestroy:
        @Resource (if available)
        @WebServiceRef (if available)
        @EJB(if available)
        @PersistenceContext and @PersistenceUnit (if available)
        注意不会激活@Transactional，要另外开启
    -->
    <context:annotation-config/>

    <!-- 开启 对指定包的 注解扫描 -->
    <context:component-scan base-package="bean"/>
    <context:component-scan base-package="aspect"/>
    <context:component-scan base-package="service"/>
    <context:component-scan base-package="listener"/>

    <!-- 开启Spring对AspectJ的支持 -->
    <aop:aspectj-autoproxy/>

    <tx:annotation-driven/>


    <!-- 利用ApplicationContextHelper 可以在任何地方获取ApplicationContext -->
    <bean id="applicationContextHelper" class="util.ApplicationContextHelper" scope="singleton"/>

    <bean id="category" class="bean.Category" scope="prototype">
        <qualifier value="categoryQualifier"/>
        <property name="name" value="category 1st" />
    </bean>

    <bean id="product" class="bean.Product" scope="prototype">
        <property name="name" value="product 1st" />
    </bean>

    <bean id="pointB" class="bean.Point" scope="prototype">
        <property name="x" value="4"/>
        <property name="y" value="2"/>
    </bean>

    <!-- DI(依赖注入)，Construct(构造器)方式注入 -->
    <bean class="bean.TestConstructInjectionBean" id="tcib">
        <constructor-arg index="0" type="java.lang.String" value="Equilateral"/>
        <constructor-arg index="1" type="int" value="20"/>
    </bean>

    <!-- DI(依赖注入)，Setter方式注入, 基本数据类型 -->
    <bean class="bean.TestSetterInjectionBean" id="tsib">
        <property name="type" value="Equilateral"> </property>
        <property name="height" value="20"> </property>

        <!--<property name="object" ref="Object"></property> 如果属性是类类型-->
    </bean>

    <!-- DI(依赖注入)，Setter方式注入, 类类型，以及集合类型-->
    <bean class="bean.TestCollectionInjectionBean" id="collectionBean">
        <!-- List类型 -->
        <property name="stringList">
            <list>
                <value type="java.lang.String">A</value>
                <value type="java.lang.String">B</value>
                <value type="java.lang.String">C</value>
                <value type="java.lang.String">D</value>
            </list>
        </property>
        <!-- Set类型 -->
        <property name="stringSet">
            <set>
                <value type="java.lang.String">A</value>
                <value type="java.lang.String">B</value>
                <value type="java.lang.String">C</value>
                <value type="java.lang.String">D</value>
            </set>
        </property>
        <!-- Map类型 -->
        <property name="stringMap">
            <map key-type="java.lang.String" value-type="java.lang.String">
                <entry key="a" value="A"/>
                <entry key="b" value="B"/>
                <entry key="c" value="C"/>
                <entry key="d" value="D"/>
            </map>
        </property>
        <!-- List类型, 并且数据集是类类型-->
        <property name="categoryList">
            <list>
                <ref bean="category"></ref>
                <ref bean="category"></ref>
                <ref bean="category"></ref>
            </list>
        </property>
    </bean>

    <!-- Autowiring(自动装配) byNAME
     Spring会自动查找 与TestAutowireByNameBean的属性(类类型)名字一样的bean 来注入-->
    <bean id="autowireByName" class="bean.TestAutowireByNameBean" autowire="byName">
        <property name="name" value="My name"/>
    </bean>

    <!-- Autowiring(自动装配) byType
     Spring会自动查找 与TestAutowireByNameBean的属性(类类型)类型一样的bean 来注入-->
    <bean id="autowireByType" class="bean.TestAutowireByTypeBean" autowire="byType">
        <property name="name" value="My name"/>
    </bean>

    <!-- Autowiring(自动装配) byConstruct
     Spring会自动查找 与TestAutowireByNameBean的属性(类类型)类型一样的bean 来注入-->
    <bean id="autowireByConstruct" class="bean.TestAutowireByConstructBean" autowire="constructor">
        <property name="name" value="My name"/>
    </bean>

    <!-- autowire="autodetect"表示自动选择 -->

    <!-- 具体配置一个Aspect(切面)的详细运行规则  -->
    <!--<aop:config>
        <aop:aspect id="firstAspect" ref="firstAspect">

            <aop:after method="loggingAdvice" pointcut="execution(public * service.ProductService.*(..))"></aop:after>
            &lt;!&ndash;<aop:before method="withReturnType" pointcut="execution(public bean.Category service.ProductService.*(..))"/>&ndash;&gt;

        </aop:aspect>
    </aop:config>-->


    <!--
    <aop:config>
        <aop:pointcut id="loggerCutpoint"
                      expression="execution(* service.ProductService.*(..)) "/>

        <aop:aspect id="logAspect" ref="loggerAspect">
            <aop:around pointcut-ref="loggerCutpoint" method="log"/>
        </aop:aspect>
    </aop:config>-->



</beans>